Komponenty
##########

.[perex]
V této kapitole přesuneme seznam úkolů do komponenty. Budeme jej tak moci snadno použít kdekoliv v aplikaci a také jej
budeme moci snadno upravovat.

--------

Často se dostaneme do situace, kdy bychom chtěli stejný nebo podobný prvek aplikace využít na více místech. Nette toto
řeší pomocí komponent. Jedná se třídy, které reprezentují vykreslitelný objekt a je možné je do stránky opakovaně vkládat.

Pojďme tedy naší tabulku s výpisem oddělit do samostatné komponenty.


Základ komponenty
*****************

Začneme tím, že si vytvoříme složku `app/components`. Do ní budeme ukládat námi vytvořené komponenty, a to včetně
šablon. V ní si vytvoříme `TaskList.php`. Třída bude dědit od `Nette\Application\UI\Control` a bude mít pouze
konstruktor a metodu `render()`:

/---php
class TaskList extends UI\Control
{
	/** @var \Nette\Database\Table\Selection */
	private $selection;

	public function __construct(Selection $selection, Nette\ComponentModel\IContainer $parent = NULL, $name = NULL)
	{
		parent::__construct($parent, $name);
		$this->selection = $selection;
	}

	public function render()
	{
		$this->template->setFile(__DIR__ . '/TaskList.latte');
		$this->template->tasks = $this->selection;
		$this->template->render();
	}
}
\---

Konstruktor má jediný povinný parametr - výraz, podle kterého budeme úkoly vybírat. Další dva parametry se jen předávají
konstruktoru rodiče a mají stejný význam, jako parametry v případě konstruktoru formuláře - slouží k připojení
komponenty k presenteru ihned při vytvoření.

Metoda `render()` zajišťuje vykreslení šablony. Podobně jako u presenteru je i v komponentách k dispozici šablona.
Před použitím se jí jen musí nastavit soubor, který se bude vykreslovat. To se udělá voláním `setFile()`. Pak už
jen stačí do šablony přiřadit data, v našem případě tedy výraz, který jsme předali v konstruktoru, a šablonu
vykreslit metodou `render()`.

Šablona `TaskList.latte` bude téměř shodná s tím, co jsme používali v šabloně pro `TaskPresenter` a `HomepagePresenter`:

/---html
<table>
	<thead>
	<tr>
		<th>Čas vytvoření</th>
		<th>Úkol</th>
		<th>Přiřazeno</th>
	</tr>
	</thead>
	<tbody>
	{foreach $tasks as $task}
	<tr n:class="$iterator->isOdd() ? odd : even">
		<td>{$task->created|date:'j. n. Y'}</td>
		<td>{$task->text}</td>
		<td>{$task->user->name}</td>
	</tr>
	{/foreach}
	</tbody>
</table>
\---

Všimněte si jedné malé změny: u řádku tabulky se objevil atribut `n:class`. Jedná se o speciální latte makro, které
umožňuje pohodlně nastavovat HTML elementům třídy. Jako parametry se mu předávají výrazy podobné ternárním operátorům
oddělené čárkami. `$iterator->isOdd() ? odd : even` ověří, zda je splněno `$iterator->isOdd()`. Pokud ano,
přidá třídu `odd`, jinak třídu `even`. Část `: even` je možno vynechat, pak se v případě nesplněné podmínky nebude
přidávat nic.

Objekt `$iterator` je speciální objekt, který Latte vkládá do všech cyklů `foreach`. Pomocí něj můžeme zjišťovat, zda
je momentální prvek v pořadí sudý nebo lichý, kolikátý v pořadí je a některé další věci. Více se dozvíte v dokumentaci
k "makru `{foreach}`":[http://doc.nette.org/cs/default-macros#toc-cykly].

Výsledkem je v našem případě "zebrovaná" tabulka.

Použití
=======

Nyní již zbývá jen komponentu použít. Nejprve v `TaskPresenter`u upravíme metodu `renderDefault()` a přidáme
`createComponentTaskList()`:

/---php
public function renderDefault($id)
{
	$this->template->taskList = $this->taskList;
}


protected function createComponentTaskList()
{
	return new TaskList($this->taskList->related('task')->order('created'));
}
\---

Výběr z databáze se přesunul do metody `createComponentTaskList()`, jinak vše zůstalo nezměněno.

V šabloně `Task/default.latte` nyní místo tabulky stačí použít makro `{control}`:

/---html
{block content}

<h1>{$taskList->title}</h1>

<fieldset>
	<legend>Přidat úkol</legend>

	{form taskForm}
	<div class="task-form">
		{label text /} {input text size => 30, autofocus => true} {label userId /} {input userId} {input create}
	</div>
	{/form}
</fieldset>

{control taskList}

{/block}
\---

A to je vše. Nyní podobou úpravu provedeme v `HomepagePresenter`u:

/---php
public function createComponentIncompleteTasks()
{
	return new TaskList($this->model->getTasks()
		->where(array('done' => false))->order('created ASC'));
}
\---

Metoda `renderDefault` je nyní prázdná, o proto jí můžeme bez obav odstranit. Použití v šabloně `Homepage/default.latte`
je opět velmi jednoduché:

/---html
{block content}

<h1>Nesplněné úkoly</h1>

{control incompleteTasks}

{/block}
\---

A to je vše. Úspěšně jsme oba výpisy úkolů nahradili komponentou.
